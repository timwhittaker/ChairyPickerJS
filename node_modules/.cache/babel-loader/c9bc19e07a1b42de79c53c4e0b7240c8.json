{"ast":null,"code":"(function (exports) {\n  const generateGaussian = require('./box-muller'); // Complementary error function\n  // From Numerical Recipes in C 2e p221\n\n\n  var erfc = function (x) {\n    var z = Math.abs(x);\n    var t = 1 / (1 + z / 2);\n    var r = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n    return x >= 0 ? r : 2 - r;\n  }; // Inverse complementary error function\n  // From Numerical Recipes 3e p265\n\n\n  var ierfc = function (x) {\n    if (x >= 2) {\n      return -100;\n    }\n\n    if (x <= 0) {\n      return 100;\n    }\n\n    var xx = x < 1 ? x : 2 - x;\n    var t = Math.sqrt(-2 * Math.log(xx / 2));\n    var r = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);\n\n    for (var j = 0; j < 2; j++) {\n      var err = erfc(r) - xx;\n      r += err / (1.12837916709551257 * Math.exp(-(r * r)) - r * err);\n    }\n\n    return x < 1 ? r : -r;\n  }; // Models the normal distribution\n\n\n  var Gaussian = function (mean, variance) {\n    if (variance <= 0) {\n      throw new Error('Variance must be > 0 (but was ' + variance + ')');\n    }\n\n    this.mean = mean;\n    this.variance = variance;\n    this.standardDeviation = Math.sqrt(variance);\n  }; // Probability density function\n\n\n  Gaussian.prototype.pdf = function (x) {\n    var m = this.standardDeviation * Math.sqrt(2 * Math.PI);\n    var e = Math.exp(-Math.pow(x - this.mean, 2) / (2 * this.variance));\n    return e / m;\n  }; // Cumulative density function\n\n\n  Gaussian.prototype.cdf = function (x) {\n    return 0.5 * erfc(-(x - this.mean) / (this.standardDeviation * Math.sqrt(2)));\n  }; // Percent point function\n\n\n  Gaussian.prototype.ppf = function (x) {\n    return this.mean - this.standardDeviation * Math.sqrt(2) * ierfc(2 * x);\n  }; // Product distribution of this and d (scale for constant)\n\n\n  Gaussian.prototype.mul = function (d) {\n    if (typeof d === \"number\") {\n      return this.scale(d);\n    }\n\n    var precision = 1 / this.variance;\n    var dprecision = 1 / d.variance;\n    return fromPrecisionMean(precision + dprecision, precision * this.mean + dprecision * d.mean);\n  }; // Quotient distribution of this and d (scale for constant)\n\n\n  Gaussian.prototype.div = function (d) {\n    if (typeof d === \"number\") {\n      return this.scale(1 / d);\n    }\n\n    var precision = 1 / this.variance;\n    var dprecision = 1 / d.variance;\n    return fromPrecisionMean(precision - dprecision, precision * this.mean - dprecision * d.mean);\n  }; // Addition of this and d\n\n\n  Gaussian.prototype.add = function (d) {\n    return gaussian(this.mean + d.mean, this.variance + d.variance);\n  }; // Subtraction of this and d\n\n\n  Gaussian.prototype.sub = function (d) {\n    return gaussian(this.mean - d.mean, this.variance + d.variance);\n  }; // Scale this by constant c\n\n\n  Gaussian.prototype.scale = function (c) {\n    return gaussian(this.mean * c, this.variance * c * c);\n  }; // Generate [num] random samples\n\n\n  Gaussian.prototype.random = function (num) {\n    let mean = this.mean;\n    let std = this.standardDeviation;\n    return Array(num).fill(0).map(() => {\n      return generateGaussian(mean, std);\n    });\n  };\n\n  var gaussian = function (mean, variance) {\n    return new Gaussian(mean, variance);\n  };\n\n  var fromPrecisionMean = function (precision, precisionmean) {\n    return gaussian(precisionmean / precision, 1 / precision);\n  };\n\n  exports(gaussian);\n})(typeof exports !== \"undefined\" ? function (e) {\n  module.exports = e;\n} // istanbul ignore next\n: function (e) {\n  this[\"gaussian\"] = e;\n});","map":{"version":3,"sources":["/home/tim/Documents/BasicReact/test/src/gaussian.js"],"names":["exports","generateGaussian","require","erfc","x","z","Math","abs","t","r","exp","ierfc","xx","sqrt","log","j","err","Gaussian","mean","variance","Error","standardDeviation","prototype","pdf","m","PI","e","pow","cdf","ppf","mul","d","scale","precision","dprecision","fromPrecisionMean","div","add","gaussian","sub","c","random","num","std","Array","fill","map","precisionmean","module"],"mappings":"AAAA,CAAC,UAASA,OAAT,EAAkB;AAEf,QAAMC,gBAAgB,GAAGC,OAAO,CAAC,cAAD,CAAhC,CAFe,CAIf;AACA;;;AACA,MAAIC,IAAI,GAAG,UAASC,CAAT,EAAY;AACrB,QAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAT,CAAR;AACA,QAAII,CAAC,GAAG,KAAK,IAAIH,CAAC,GAAG,CAAb,CAAR;AACA,QAAII,CAAC,GAAGD,CAAC,GAAGF,IAAI,CAACI,GAAL,CAAS,CAACL,CAAD,GAAKA,CAAL,GAAS,UAAT,GAAsBG,CAAC,IAAI,aACxCA,CAAC,IAAI,aAAaA,CAAC,IAAI,aAAaA,CAAC,IAAI,CAAC,UAAD,GACzCA,CAAC,IAAI,aAAaA,CAAC,IAAI,CAAC,UAAD,GAAcA,CAAC,IAAI,aAC1CA,CAAC,IAAI,CAAC,UAAD,GAAcA,CAAC,GAAG,UAAtB,CADqC,CAAnB,CAAlB,CADoC,CAAlB,CAAlB,CADmC,CAAhC,CAAZ;AAIA,WAAOJ,CAAC,IAAI,CAAL,GAASK,CAAT,GAAa,IAAIA,CAAxB;AACD,GARD,CANe,CAgBf;AACA;;;AACA,MAAIE,KAAK,GAAG,UAASP,CAAT,EAAY;AACtB,QAAIA,CAAC,IAAI,CAAT,EAAY;AAAE,aAAO,CAAC,GAAR;AAAc;;AAC5B,QAAIA,CAAC,IAAI,CAAT,EAAY;AAAE,aAAO,GAAP;AAAa;;AAE3B,QAAIQ,EAAE,GAAIR,CAAC,GAAG,CAAL,GAAUA,CAAV,GAAc,IAAIA,CAA3B;AACA,QAAII,CAAC,GAAGF,IAAI,CAACO,IAAL,CAAU,CAAC,CAAD,GAAKP,IAAI,CAACQ,GAAL,CAASF,EAAE,GAAG,CAAd,CAAf,CAAR;AAEA,QAAIH,CAAC,GAAG,CAAC,OAAD,IAAY,CAAC,UAAUD,CAAC,GAAG,OAAf,KACX,IAAIA,CAAC,IAAI,UAAUA,CAAC,GAAG,OAAlB,CADM,IACwBA,CADpC,CAAR;;AAGA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIC,GAAG,GAAGb,IAAI,CAACM,CAAD,CAAJ,GAAUG,EAApB;AACAH,MAAAA,CAAC,IAAIO,GAAG,IAAI,sBAAsBV,IAAI,CAACI,GAAL,CAAS,EAAED,CAAC,GAAGA,CAAN,CAAT,CAAtB,GAA2CA,CAAC,GAAGO,GAAnD,CAAR;AACD;;AAED,WAAQZ,CAAC,GAAG,CAAL,GAAUK,CAAV,GAAc,CAACA,CAAtB;AACD,GAhBD,CAlBe,CAoCf;;;AACA,MAAIQ,QAAQ,GAAG,UAASC,IAAT,EAAeC,QAAf,EAAyB;AACtC,QAAIA,QAAQ,IAAI,CAAhB,EAAmB;AACjB,YAAM,IAAIC,KAAJ,CAAU,mCAAmCD,QAAnC,GAA8C,GAAxD,CAAN;AACD;;AACD,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKE,iBAAL,GAAyBf,IAAI,CAACO,IAAL,CAAUM,QAAV,CAAzB;AACD,GAPD,CArCe,CA8Cf;;;AACAF,EAAAA,QAAQ,CAACK,SAAT,CAAmBC,GAAnB,GAAyB,UAASnB,CAAT,EAAY;AACnC,QAAIoB,CAAC,GAAG,KAAKH,iBAAL,GAAyBf,IAAI,CAACO,IAAL,CAAU,IAAIP,IAAI,CAACmB,EAAnB,CAAjC;AACA,QAAIC,CAAC,GAAGpB,IAAI,CAACI,GAAL,CAAS,CAACJ,IAAI,CAACqB,GAAL,CAASvB,CAAC,GAAG,KAAKc,IAAlB,EAAwB,CAAxB,CAAD,IAA+B,IAAI,KAAKC,QAAxC,CAAT,CAAR;AACA,WAAOO,CAAC,GAAGF,CAAX;AACD,GAJD,CA/Ce,CAqDf;;;AACAP,EAAAA,QAAQ,CAACK,SAAT,CAAmBM,GAAnB,GAAyB,UAASxB,CAAT,EAAY;AACnC,WAAO,MAAMD,IAAI,CAAC,EAAEC,CAAC,GAAG,KAAKc,IAAX,KAAoB,KAAKG,iBAAL,GAAyBf,IAAI,CAACO,IAAL,CAAU,CAAV,CAA7C,CAAD,CAAjB;AACD,GAFD,CAtDe,CA0Df;;;AACAI,EAAAA,QAAQ,CAACK,SAAT,CAAmBO,GAAnB,GAAyB,UAASzB,CAAT,EAAY;AACnC,WAAO,KAAKc,IAAL,GAAY,KAAKG,iBAAL,GAAyBf,IAAI,CAACO,IAAL,CAAU,CAAV,CAAzB,GAAwCF,KAAK,CAAC,IAAIP,CAAL,CAAhE;AACD,GAFD,CA3De,CA+Df;;;AACAa,EAAAA,QAAQ,CAACK,SAAT,CAAmBQ,GAAnB,GAAyB,UAASC,CAAT,EAAY;AACnC,QAAI,OAAOA,CAAP,KAAc,QAAlB,EAA4B;AAC1B,aAAO,KAAKC,KAAL,CAAWD,CAAX,CAAP;AACD;;AACD,QAAIE,SAAS,GAAG,IAAI,KAAKd,QAAzB;AACA,QAAIe,UAAU,GAAG,IAAIH,CAAC,CAACZ,QAAvB;AACA,WAAOgB,iBAAiB,CACpBF,SAAS,GAAGC,UADQ,EAEpBD,SAAS,GAAG,KAAKf,IAAjB,GAAwBgB,UAAU,GAAGH,CAAC,CAACb,IAFnB,CAAxB;AAGD,GATD,CAhEe,CA2Ef;;;AACAD,EAAAA,QAAQ,CAACK,SAAT,CAAmBc,GAAnB,GAAyB,UAASL,CAAT,EAAY;AACnC,QAAI,OAAOA,CAAP,KAAc,QAAlB,EAA4B;AAC1B,aAAO,KAAKC,KAAL,CAAW,IAAID,CAAf,CAAP;AACD;;AACD,QAAIE,SAAS,GAAG,IAAI,KAAKd,QAAzB;AACA,QAAIe,UAAU,GAAG,IAAIH,CAAC,CAACZ,QAAvB;AACA,WAAOgB,iBAAiB,CACpBF,SAAS,GAAGC,UADQ,EAEpBD,SAAS,GAAG,KAAKf,IAAjB,GAAwBgB,UAAU,GAAGH,CAAC,CAACb,IAFnB,CAAxB;AAGD,GATD,CA5Ee,CAuFf;;;AACAD,EAAAA,QAAQ,CAACK,SAAT,CAAmBe,GAAnB,GAAyB,UAASN,CAAT,EAAY;AACnC,WAAOO,QAAQ,CAAC,KAAKpB,IAAL,GAAYa,CAAC,CAACb,IAAf,EAAqB,KAAKC,QAAL,GAAgBY,CAAC,CAACZ,QAAvC,CAAf;AACD,GAFD,CAxFe,CA4Ff;;;AACAF,EAAAA,QAAQ,CAACK,SAAT,CAAmBiB,GAAnB,GAAyB,UAASR,CAAT,EAAY;AACnC,WAAOO,QAAQ,CAAC,KAAKpB,IAAL,GAAYa,CAAC,CAACb,IAAf,EAAqB,KAAKC,QAAL,GAAgBY,CAAC,CAACZ,QAAvC,CAAf;AACD,GAFD,CA7Fe,CAiGf;;;AACAF,EAAAA,QAAQ,CAACK,SAAT,CAAmBU,KAAnB,GAA2B,UAASQ,CAAT,EAAY;AACrC,WAAOF,QAAQ,CAAC,KAAKpB,IAAL,GAAYsB,CAAb,EAAgB,KAAKrB,QAAL,GAAgBqB,CAAhB,GAAoBA,CAApC,CAAf;AACD,GAFD,CAlGe,CAsGf;;;AACAvB,EAAAA,QAAQ,CAACK,SAAT,CAAmBmB,MAAnB,GAA4B,UAASC,GAAT,EAAa;AACvC,QAAIxB,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIyB,GAAG,GAAG,KAAKtB,iBAAf;AACA,WAAOuB,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgB,CAAhB,EAAmBC,GAAnB,CAAuB,MAAM;AAClC,aAAO7C,gBAAgB,CAACiB,IAAD,EAAMyB,GAAN,CAAvB;AACD,KAFM,CAAP;AAGD,GAND;;AAQA,MAAIL,QAAQ,GAAG,UAASpB,IAAT,EAAeC,QAAf,EAAyB;AACtC,WAAO,IAAIF,QAAJ,CAAaC,IAAb,EAAmBC,QAAnB,CAAP;AACD,GAFD;;AAIA,MAAIgB,iBAAiB,GAAG,UAASF,SAAT,EAAoBc,aAApB,EAAmC;AACzD,WAAOT,QAAQ,CAACS,aAAa,GAAGd,SAAjB,EAA4B,IAAIA,SAAhC,CAAf;AACD,GAFD;;AAIAjC,EAAAA,OAAO,CAACsC,QAAD,CAAP;AACD,CAxHH,EAyHG,OAAOtC,OAAP,KAAoB,WAApB,GACK,UAAS0B,CAAT,EAAY;AAAEsB,EAAAA,MAAM,CAAChD,OAAP,GAAiB0B,CAAjB;AAAqB,CADxC,CAEG;AAFH,EAGK,UAASA,CAAT,EAAY;AAAE,OAAK,UAAL,IAAmBA,CAAnB;AAAuB,CA5H7C","sourcesContent":["(function(exports) {\n\n    const generateGaussian = require('./box-muller');\n  \n    // Complementary error function\n    // From Numerical Recipes in C 2e p221\n    var erfc = function(x) {\n      var z = Math.abs(x);\n      var t = 1 / (1 + z / 2);\n      var r = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 +\n              t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 +\n              t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 +\n              t * (-0.82215223 + t * 0.17087277)))))))))\n      return x >= 0 ? r : 2 - r;\n    };\n  \n    // Inverse complementary error function\n    // From Numerical Recipes 3e p265\n    var ierfc = function(x) {\n      if (x >= 2) { return -100; }\n      if (x <= 0) { return 100; }\n  \n      var xx = (x < 1) ? x : 2 - x;\n      var t = Math.sqrt(-2 * Math.log(xx / 2));\n  \n      var r = -0.70711 * ((2.30753 + t * 0.27061) /\n              (1 + t * (0.99229 + t * 0.04481)) - t);\n  \n      for (var j = 0; j < 2; j++) {\n        var err = erfc(r) - xx;\n        r += err / (1.12837916709551257 * Math.exp(-(r * r)) - r * err);\n      }\n  \n      return (x < 1) ? r : -r;\n    };\n  \n    // Models the normal distribution\n    var Gaussian = function(mean, variance) {\n      if (variance <= 0) {\n        throw new Error('Variance must be > 0 (but was ' + variance + ')');\n      }\n      this.mean = mean;\n      this.variance = variance;\n      this.standardDeviation = Math.sqrt(variance);\n    }\n  \n    // Probability density function\n    Gaussian.prototype.pdf = function(x) {\n      var m = this.standardDeviation * Math.sqrt(2 * Math.PI);\n      var e = Math.exp(-Math.pow(x - this.mean, 2) / (2 * this.variance));\n      return e / m;\n    };\n  \n    // Cumulative density function\n    Gaussian.prototype.cdf = function(x) {\n      return 0.5 * erfc(-(x - this.mean) / (this.standardDeviation * Math.sqrt(2)));\n    };\n  \n    // Percent point function\n    Gaussian.prototype.ppf = function(x) {\n      return this.mean - this.standardDeviation * Math.sqrt(2) * ierfc(2 * x);\n    };\n  \n    // Product distribution of this and d (scale for constant)\n    Gaussian.prototype.mul = function(d) {\n      if (typeof(d) === \"number\") {\n        return this.scale(d);\n      }\n      var precision = 1 / this.variance;\n      var dprecision = 1 / d.variance;\n      return fromPrecisionMean(\n          precision + dprecision, \n          precision * this.mean + dprecision * d.mean);\n    };\n  \n    // Quotient distribution of this and d (scale for constant)\n    Gaussian.prototype.div = function(d) {\n      if (typeof(d) === \"number\") {\n        return this.scale(1 / d);\n      }\n      var precision = 1 / this.variance;\n      var dprecision = 1 / d.variance;\n      return fromPrecisionMean(\n          precision - dprecision, \n          precision * this.mean - dprecision * d.mean);\n    };\n  \n    // Addition of this and d\n    Gaussian.prototype.add = function(d) {\n      return gaussian(this.mean + d.mean, this.variance + d.variance);\n    };\n  \n    // Subtraction of this and d\n    Gaussian.prototype.sub = function(d) {\n      return gaussian(this.mean - d.mean, this.variance + d.variance);\n    };\n  \n    // Scale this by constant c\n    Gaussian.prototype.scale = function(c) {\n      return gaussian(this.mean * c, this.variance * c * c);\n    };\n  \n    // Generate [num] random samples\n    Gaussian.prototype.random = function(num){\n      let mean = this.mean;\n      let std = this.standardDeviation;\n      return Array(num).fill(0).map(() => {\n        return generateGaussian(mean,std)\n      })\n    };\n  \n    var gaussian = function(mean, variance) {\n      return new Gaussian(mean, variance);\n    };\n  \n    var fromPrecisionMean = function(precision, precisionmean) {\n      return gaussian(precisionmean / precision, 1 / precision);\n    };\n  \n    exports(gaussian);\n  })\n  (typeof(exports) !== \"undefined\"\n      ? function(e) { module.exports = e; }\n      // istanbul ignore next\n      : function(e) { this[\"gaussian\"] = e; });\n  "]},"metadata":{},"sourceType":"module"}