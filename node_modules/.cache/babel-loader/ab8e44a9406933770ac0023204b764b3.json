{"ast":null,"code":"var _jsxFileName = \"/home/tim/Documents/BasicReact/test/src/field-array.js\";\nimport React from \"react\";\nimport { Formik, Form, Field, FieldArray } from \"formik\"; // Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Speakers = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Speakers\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      speakers: [],\n      commenters: []\n    },\n    onSubmit: values => setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n    }, 500),\n    render: ({\n      values\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(FieldArray, {\n        name: \"speakers\",\n        render: arrayHelpers => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [values.speakers && values.speakers.length > 0 ? values.speakers.map((speakers, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: `speakers.${index}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => arrayHelpers.remove(index),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => arrayHelpers.insert(index, \"\") // insert an empty string at a position\n              ,\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => arrayHelpers.push(\"\"),\n            children: \"Add a speaker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 19\n          }, this), values.speakers && values.speakers.length > 0 ? values.speakers.map((speakers, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: `speakers.${index}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => arrayHelpers.remove(index),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => arrayHelpers.insert(index, \"\") // insert an empty string at a position\n              ,\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => arrayHelpers.push(\"\"),\n            children: \"Add a speaker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this);\n\n_c = Speakers;\nexport default Speakers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Speakers\");","map":{"version":3,"sources":["/home/tim/Documents/BasicReact/test/src/field-array.js"],"names":["React","Formik","Form","Field","FieldArray","Speakers","speakers","commenters","values","setTimeout","alert","JSON","stringify","arrayHelpers","length","map","index","remove","insert","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik, Form, Field, FieldArray } from \"formik\";\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nconst Speakers = () => (\n  <div>\n    <h1>Speakers</h1>\n    <Formik\n      initialValues={{ speakers: [], commenters: [] }}\n      onSubmit={(values) =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"speakers\"\n            render={(arrayHelpers) => (\n              <div>\n                {values.speakers && values.speakers.length > 0 ? (\n                  values.speakers.map((speakers, index) => (\n                    <div key={index}>\n                      <Field name={`speakers.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} \n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, \"\")} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push(\"\")}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a speaker\n                  </button>\n                )}\n                                {values.speakers && values.speakers.length > 0 ? (\n                  values.speakers.map((speakers, index) => (\n                    <div key={index}>\n                      <Field name={`speakers.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} \n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, \"\")} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push(\"\")}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a speaker\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  </div>\n);\n\nexport default Speakers;\n\n\n\n"]},"metadata":{},"sourceType":"module"}